name: Compliance Matrix Validation

on:
  push:
    branches: [ main, matrix ]
    paths:
      - 'spec-requirements.yaml'
      - 'language-implementations/*.yaml'
      - 'tools/compliance_matrix_generator.py'
      - 'tools/validate_compliance_files.py'
  pull_request:
    branches: [ main ]
    paths:
      - 'spec-requirements.yaml'
      - 'language-implementations/*.yaml'
      - 'tools/compliance_matrix_generator.py'
      - 'tools/validate_compliance_files.py'

jobs:
  validate-compliance-files:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml
        
    - name: Validate compliance tracking files
      run: |
        python tools/validate_compliance_files.py --spec-file spec-requirements.yaml --lang-dir language-implementations
        
    - name: Test compliance matrix generation
      run: |
        python tools/compliance_matrix_generator.py --spec-file spec-requirements.yaml --lang-dir language-implementations --output-format json > /tmp/compliance-test.json
        echo "âœ… Compliance matrix generation test passed"
        
    - name: Generate updated compliance matrix (if on main branch)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        python tools/compliance_matrix_generator.py \
          --spec-file spec-requirements.yaml \
          --lang-dir language-implementations \
          --output spec-compliance-matrix-generated.md
        
        # Compare with existing matrix for significant changes
        if [ -f spec-compliance-matrix-generated.md ]; then
          echo "Generated compliance matrix successfully"
          # In the future, this could create a PR to update the main matrix
        fi
        
    - name: Upload generated matrix as artifact
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/upload-artifact@v3
      with:
        name: generated-compliance-matrix
        path: spec-compliance-matrix-generated.md
        retention-days: 30
        
  check-feature-coverage:
    runs-on: ubuntu-latest
    needs: validate-compliance-files
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml
        
    - name: Analyze feature coverage
      run: |
        python -c "
        import yaml
        import sys
        from pathlib import Path
        
        # Load spec requirements
        with open('spec-requirements.yaml', 'r') as f:
            spec_data = yaml.safe_load(f)
        
        total_features = 0
        experimental_features = 0
        
        # Count features by status
        for category_data in spec_data.get('categories', {}).values():
            for feature in category_data.get('features', []):
                for req in feature.get('requirements', []):
                    total_features += 1
                    if req.get('status', '').lower() in ['experimental', 'development', 'alpha']:
                        experimental_features += 1
        
        stable_features = total_features - experimental_features
        experimental_percentage = (experimental_features / total_features * 100) if total_features > 0 else 0
        
        print(f'ðŸ“Š Feature Coverage Analysis:')
        print(f'Total features: {total_features}')
        print(f'Stable features: {stable_features} ({stable_features/total_features*100:.1f}%)')
        print(f'Experimental features: {experimental_features} ({experimental_percentage:.1f}%)')
        
        # Load language implementations
        lang_dir = Path('language-implementations')
        if lang_dir.exists():
            languages = []
            for lang_file in lang_dir.glob('*.yaml'):
                with open(lang_file, 'r') as f:
                    lang_data = yaml.safe_load(f)
                languages.append(lang_data.get('language', lang_file.stem))
            
            print(f'Languages with status files: {len(languages)}')
            print(f'Languages: {", ".join(sorted(languages))}')
        "
        
  # This job would run on a schedule to check for new experimental features
  monitor-experimental-features:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml requests
        
    - name: Check for experimental features ready for stabilization
      run: |
        python -c "
        import yaml
        from datetime import datetime
        
        # This would check for experimental features that might be ready for stabilization
        # based on criteria like age, implementation coverage, etc.
        
        with open('spec-requirements.yaml', 'r') as f:
            spec_data = yaml.safe_load(f)
        
        experimental_features = []
        
        for category_id, category_data in spec_data.get('categories', {}).items():
            for feature in category_data.get('features', []):
                for req in feature.get('requirements', []):
                    if req.get('status', '').lower() in ['experimental', 'development']:
                        experimental_features.append({
                            'category': category_id,
                            'feature': feature.get('name'),
                            'requirement': req.get('name'),
                            'id': req.get('id'),
                            'status': req.get('status')
                        })
        
        if experimental_features:
            print(f'ðŸš§ Found {len(experimental_features)} experimental features:')
            for feat in experimental_features[:10]:  # Show first 10
                print(f'  - {feat[\"category\"]}/{feat[\"requirement\"]} ({feat[\"status\"]})')
            
            if len(experimental_features) > 10:
                print(f'  ... and {len(experimental_features) - 10} more')
        "

# Note: To enable the scheduled monitoring, uncomment this section
# on:
#   schedule:
#     # Run every Monday at 9 AM UTC to check experimental feature status
#     - cron: '0 9 * * 1'
#   workflow_dispatch:  # Allow manual triggering
